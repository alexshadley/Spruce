file = _{ SOI ~ (top_stmt | empty_line)* ~ EOI }

top_stmt = _{ ( function_decl | type_decl | assign ) ~ "\n" }
stmt = _{ ( assign | fn_call | case ) ~ "\n" }

type_decl = { "type" ~ id ~ "{\n" ~ (type_option ~ "\n")+ ~ "}" }
type_option = { id ~ ("(" ~ id ~ ("," ~ id)* ~ ")")? }

function_decl = { id ~ fn_args ~ "{\n" ~ body ~ "}" }
fn_args = { "(" ~ (id ~ ("," ~ id)* )? ~ ")" }

assign = { target ~ "=" ~ valued }

target = _{ mutable_tgt | update_tgt | id }
mutable_tgt = { "mut" ~ id }
update_tgt = { id ~ ":" }

// something that can be reduced to a value
valued = _{ case | expr }

case = { "case" ~ expr ~ "{\n" ~ case_option+ ~ "}" }
case_option = { case_pattern ~ "->" ~ (expr | "{\n" ~ body ~ "}") ~ "\n" }
case_pattern = { id ~ ( "(" ~ id ~ ( "," ~ id )*  ~ ")")? }

body = { (stmt | empty_line)* ~ (valued ~ "\n")? }

expr = { term ~ (operation ~ term)* }
term = _{ fn_call | id | num | "(" ~ expr ~ ")" }

fn_call = { id ~ "(" ~ (expr ~ ("," ~ expr)* )? ~ ")" }

id = @{ ASCII_ALPHA ~ ASCII_ALPHANUMERIC* }

empty_line = _{ "\n" }

num = @{ int ~ ("." ~ ASCII_DIGIT*)? ~ (^"e" ~ int)? }
    int = { ("+" | "-")? ~ ASCII_DIGIT+ }

operation = _{ add | subtract | multiply | divide | power }
    add      = { "+" }
    subtract = { "-" }
    multiply = { "*" }
    divide   = { "/" }
    power    = { "^" }

WHITESPACE = _{ " " | "\t" }
